<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">


<!-- SQL문장 로깅용 hikariCP 접속 코드 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="book_ex"/>
		<property name="password" value="book_ex"/>
	</bean>

<!-- 2. HikariDataSource 클래스를 이용한 dataSource 빈 생성: JDBC 설정이 저장된 HikariConfig 빈 주입받음 -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>




<!-- Connection Pool 관련 Bean 구성: HikariCP -->
<!-- 방법1: JDBC 정보를 직접 설정 -->
<!-- 애플리케이션 배포용 -->
<!-- 1. JDBC 설정 정보가 설정된 HikariConfig 빈 생성--><!-- 
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe"/>
		<property name="username" value="book_ex"/>
		<property name="password" value="book_ex"/>
	</bean> -->

<!-- 2. HikariDataSource 클래스를 이용한 dataSource 빈 생성: JDBC 설정이 저장된 HikariConfig 빈 주입받음 --><!-- 
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig"/>
	</bean> -->

<!-- 방법2: properties 파일 이용 -->
<!-- 1. jdbc.properties 파일에서 읽어 들이는 설정 --><!-- 
<context:property-placeholder location="classpath:jdbc_config/jdbc.properties"/>
 -->
<!-- 2. JDBC 설정 정보가 설정된 HikariConfig 빈 생성--><!-- 
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="${jdbcHikari.driverClassName}" />
		<property name="jdbcUrl" value="${jdbcHikari.jdbcUrl}"/>
		<property name="username" value="${jdbcHikari.username}"/>
		<property name="password" value="${jdbcHikari.password}"/>
	</bean> -->

<!-- 3. HikariDataSource 클래스를 이용한 dataSource 빈 생성: JDBC 설정이 저장된 HikariConfig 빈 주입받음 --><!-- 
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource">
		<constructor-arg ref="hikariConfig"/>
	</bean> -->

<!-- ======================================================= -->

<!-- mybatis-spring 연동: DAO 객체가 CP의 connection 하나를 가져옴 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<list><!-- 
				<value>classpath:com/spring/mypro00/mapper/MyBoardMapper.xml</value>
				<value>classpath:com/spring/mypro00/mapper/MyReplyMapper.xml</value>
				<value>classpath:com/spring/mypro00/mapper/MyBoardAttachFileMapper.xml</value>
				<value>classpath:com/spring/mypro00/mapper/MyMemberMapper.xml</value>-->
			</list>
		</property>
	</bean>
	
<!-- mybatis-spring 연동: SqlSessionFactory 보다 쓰레드에 안전 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	
<!-- 매퍼인터패이스 자동 빈 생성 -->
<!-- 설정된 패키지에 DAO클래스를 대신하는 매퍼-인터페이스가 있습니다. --><!-- 
	<mybatis-spring:scan base-package="com.spring.mypro00.mapper"/> -->


<!-- 스프링 트랜잭션 기능 활성화 -->
	<tx:annotation-driven/>

<!-- Spring Transaction 관리자 빈(dataSource빈을 주입받음) -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		  
		  <property name="dataSource" ref="dataSource"/>
	</bean>












</beans>
